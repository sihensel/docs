= Regular Expressions

== Metacaracters
Metacaracters are all characters used to define regular expressions. +
These include `^ $ . [ ] { } ( ) - ? * | \`.

The metacharacter `.` matches any character, but it also increases the word length. +
`.abc` will *not* find the string `abc` since the minimum word length is 4.

== Anchors
The caret `^` and dollar `$` signs acts as anchors for the beginning or the end of the line, respectively. +
`^abc` finds all words that begin with `abc` and also `abc` itself. +
`^abc$` will only find the string `abc`.
`^..abc.$` matches all words that contain two letters, followed by `abc` followed by another letter.

NOTE: The Expression `^$` will match blank lines.

== Bracket Expressions
Bracket Expressions match a single character from a specified set of characters. They also count towards the word length. +
`[bg]zip` matches either the word `bzip` or `gzip`, but not `zip`.

If we include a caret in the bracket, it acts as a negation.
`[^bg]zip` will match everything _except_ `bzip` and `gzip`.

TIP: Config files often use hash characters as comments. To only see enabled options, use `\^[^#]`.

Bracket Expressions also allow for the use of ranges, e.g. `^[A-Z]-file` matches all strings that start with an uppercase letter from A to Z. +
To include the dash as a regex filter, use it at the beginning of the expression `[-AZ]`.

For all POSIX characters classes, see https://www.regular-expressions.info/posixbrackets.html[here].

== Extended Regular Expressions

=== Alternation
`abc|def` matches either of both strings. Alternations are not limited to only two choices `ab|cd|ef`. +
To use them with other regulare expressions, wrap them in braces `^a(b|c)de`.

=== Quantifiers
`?` causes the _preceding_ character to be matched once or not at all `a?bc` matches `abc` and `bc`. +
With `*`, characters can occur any number of times `a*bc` matches `aaabc` as well as `bc`. +
`+` requires at least one match `a+bc` does not match `bc`.

To match a characters a specific number of times, use `{ }`. These also apply to the _preceding_ element.

[options="header","footer"]
|===
|Specifier|Description
|`{n}`|Match the element if it occurs exactly `n` times
|`{n,m}`|Match the element if it occurs at least `n` times, but no more that `m` times
|`{n,}`|Match the element if it occurs at least `n` times
|`{,m}`|Match the element if it occurs no more that `m` times
|===
